#!/usr/bin/env python
## Author:      Samuel Abels
## Date:        2007-06-04
## Description: Starts the Exscript interpreter to execute commands on a list 
##              of hosts.
import os, getpass, re
import sys
sys.path.append('src')
from Exscript        import Exscript
from Exscript.FooLib import Interact
from Exscript.FooLib import OptionParser
from Exscript.FooLib import UrlParser

True  = 1
False = 0

__version__ = '0.9.12'

def usage():
    print "Exscript %s" % __version__
    print "Copyright (C) 2007 by Samuel Abels <http://debain.org>."
    print "Syntax: exscript [options] exscript [hostname [hostname ...]]"
    print "  -a, --authorize"
    print "                 When given, authorization is performed on devices that"
    print "                 support AAA (by default, Exscript only authenticates)"
    print "  -A, --authorize2"
    print "                 Like -a, but uses the authentication password instead of"
    print "                 asking for a password to be entered."
    print "  -c, --connections NUM"
    print "                 Maximum number of concurrent connections."
    print "                 NUM is a number between 1 and 20, default is 1"
    print "      --csv-hosts FILE"
    print "                 Loads a list of hostnames and definitions from the given file."
    print "                 The first line of the file must have the column headers in the"
    print "                 following syntax:"
    print "                    hostname [variable] [variable] ..."
    print "                 where the fields are separated by tabs, \"hostname\" is the"
    print "                 keyword \"hostname\" and \"variable\" is a unique name under"
    print "                 which the column is accessed in the script."
    print "                 The following lines contain the hostname in the first column,"
    print "                 and the values of the variables in the following columns."
    print "  -d, --define PAIR"
    print "                 Defines a variable that is passed to the script."
    print "                 PAIR has the following syntax: <STRING>=<STRING>."
    print "      --default-domain STRING"
    print "                 The IP domain name that is used if a given hostname has no "
    print "                 domain appended."
    print "      --hosts FILE"
    print "                 Loads a list of hostnames from the given file (one host per"
    print "                 line)."
    print "  -i, --non-interactive"
    print "                 Do not ask for a username or password."
    print "  -l, --logdir DIR"
    print "                 Logs any communication into the directory with the given name."
    print "                 Each filename consists of the hostname with \"_log\" appended."
    print "                 Errors are written to a separate file, where the filename"
    print "                 consists of the hostname with \".log.error\" appended."
    print "      --no-echo"
    print "                 Turns off the echo, such that the network activity is no longer"
    print "                 written to stdout."
    print "                 This is already the default behavior if the -c option was given"
    print "                 with a number greater than 1."
    print "  -n, --no-authentication"
    print "                 When given, the authentication procedure is skipped. Implies -i."
    print "      --no-auto-logout"
    print "                 Do not attempt to execute the exit or quit command at the end"
    print "                 of a script."
    print "      --no-prompt"
    print "                 Do not wait for a prompt anywhere. Note that this will also"
    print "                 cause Exscript to disable commands that require a prompt, such"
    print "                 as 'extract'."
    print "      --no-initial-prompt"
    print "                 Do not wait for a prompt after sending the password."
    print "  -p, --protocol STRING"
    print "                 Specify which protocol to use to connect to the remote host."
    print "                 STRING is one of: telnet ssh"
    print "                 The default protocol is telnet."
    print "      --ssh-auto-verify"
    print "                 Automatically confirms the 'Host key changed' SSH error "
    print "                 message with 'yes'. Highly insecure and not recommended."
    print "      --ssh-key FILE"
    print "                 Specify a key file that is passed to the SSH client."
    print "                 This is equivalent to using the -i parameter with ssh."
    print "  -v, --verbose NUM"
    print "                 Print out debug information about the network activity."
    print "                 NUM is a number between 0 (min) and 5 (max)"
    print "  -V, --parser-verbose NUM"
    print "                 Print out debug information about the Exscript parser."
    print "                 NUM is a number between 0 (min) and 5 (max)"
    print "      --version  Prints the version number."
    print "  -h, --help     Prints this help."

# Define default options.
default_defines = {'hostname': 'unknown'}
default_options = [
  ('authorize',         'a',  False),
  ('authorize2',        'A',  False),
  ('no-echo',           None, False),
  ('connections=',      'c:', 1),
  ('csv-hosts=',        None, None),
  ('define=',           'd:', default_defines),
  ('hosts=',            None, None),
  ('default-domain=',   None, ''),
  ('non-interactive',   'i',  False),
  ('logdir=',           'l:', None),
  ('protocol=',         'p:', 'telnet'),
  ('no-authentication', 'n',  False),
  ('no-prompt',         None, False),
  ('no-initial-prompt', None, False),
  ('no-auto-logout',    None, False),
  ('verbose=',          'v:', 0),
  ('parser-verbose=',   'V:', 0),
  ('ssh-auto-verify=',  None, False),
  ('ssh-key=',          None, None),
  ('version',           None, False),
  ('help',              'h',  False)
]

def run(*args, **kwargs):
    options = {}
    for option, short_option, value in default_options:
        option = re.sub(r'=$', '', option)
        options[option] = value
    options.update(kwargs)
    options['define'].update(default_defines)

    # Show the help, if requested.
    if options['help']:
        usage()
        sys.exit()

    # Show the version number, if requested.
    if options['version']:
        print "Exscript %s" % __version__
        sys.exit()

    # Check command line syntax.
    if options['authorize'] and options['authorize2']:
        print "Error: Can't use both, -a and -A switch."
        sys.exit(1)
    if options['no-authentication'] and options['authorize']:
        print "Error: Can't use both, -n and -a switch."
        sys.exit(1)
    if options['no-authentication'] and options['authorize2']:
        print "Error: Can't use both, -n and -A switch."
        sys.exit(1)

    try:
        filename  = args[0]
        hostnames = list(args[1:])
    except:
        usage()
        sys.exit(1)
    exscript = Exscript(domain = options.get('default-domain'),
                        logdir = options.get('logdir'))
    exscript.add_hosts(hostnames)

    # If a filename containing hostnames AND VARIABLES was given, read it.
    if options.get('csv-hosts') is not None:
        try:
            exscript.add_hosts_from_csv(options.get('csv-hosts'))
        except Exception, e:
            print e
            sys.exit(1)

    # If a filename containing hostnames was given, read it.
    if options.get('hosts') is not None:
        try:
            exscript.add_hosts_from_file(options.get('hosts'))
        except Exception, e:
            print e
            sys.exit(1)

    # Create the log directory.
    if options.get('logdir') is not None:
        if not os.path.exists(options.get('logdir')):
            print 'Creating log directory (%s)...' % options.get('logdir')
            try:
                os.makedirs(options.get('logdir'))
            except:
                print 'Error: Unable to create directory %s.' % options.get('logdir')
                sys.exit(1)

    # Make sure that all mandatory options are present.
    if len(exscript.hostnames) <= 0:
        usage()
        sys.exit(1)

    # Read the Exscript.
    file = open(filename, 'r')
    exscript_content = file.read()
    file.close()

    # Prepare the code that is executed after the user script has completed.
    #FIXME: Move into the library, then use load_from_file instead of load().
    if not options['no-auto-logout']:
        exscript_content += r'''
    ## Exscript generated commands. ##
    {if device.os(0) is "vrp"}
        {connection.send("quit\r", 0)}
    {else}
        {connection.send("exit\r", 0)}
    {end}'''

    # Load the code into the exscript.
    exscript.define(**options['define'])
    try:
        exscript.load(exscript_content,
                      verbose   = options['parser-verbose'],
                      no_prompt = options['no-prompt'])
    except Exception, e:
        if options['verbose'] > 0:
            raise
        print e
        sys.exit(1)

    # Read username and password.
    try:
        if options['non-interactive']:
            user     = None
            password = None
        else:
            user, password      = Interact.get_login()
            options['user']     = user
            options['password'] = password
        if options['authorize']:
            msg = 'Please enter your authorization password: '
            options['password2'] = getpass.getpass(msg)
    except:
        sys.exit(1)

    exscript.run(**options)

if __name__ == '__main__':
    # Parse options.
    try:
        options, args = OptionParser.parse_options(sys.argv, default_options)
    except:
        usage()
        sys.exit(1)

    run(*args, **options)
