#!/usr/bin/env python
# Copyright (C) 2010 Samuel Abels.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
import os
import sys
from optparse         import OptionParser
from Exscript         import __version__
from Exscriptd.Config import default_config_dir
from Exscriptd.config import modules

__dirname__ = os.path.dirname(__file__)

subcommands = []

usage = '''
%prog [options] section command [...]

Sections:'''
for module_name, module in modules.iteritems():
    usage += '\n  ' + module_name + '\t' + module.get_description()

parser = OptionParser(usage = usage, version = __version__)
parser.disable_interspersed_args()
parser.add_option('--config-dir',
                  dest    = 'config_dir',
                  default = default_config_dir,
                  metavar = 'FILE',
                  help    = '''
The XML config file for the Exscript daemon.
'''.strip())

# Parse all options before the first positional argument.
options, args = parser.parse_args(sys.argv[1:])

try:
    section = args.pop(0)
except IndexError:
    parser.error('section argument missing')

try:
    command = args.pop(0)
except IndexError:
    parser.error('command argument missing')

try:
    module = modules[section]
except KeyError:
    parser.error('no such section: %s' % section)

handler = module(options, script_dir = __dirname__)

# Get the command handler.
try:
    start = getattr(handler, 'start_' + command)
except AttributeError:
    parser.error('no such command: %s' % command)

# Parse command-specific options.
usage = '%prog [options] ' + section + ' ' + command + ' [options] [...]'
parser = OptionParser(usage = usage)
try:
    optadd = getattr(handler, 'getopt_' + command)
except AttributeError:
    pass
else:
    optadd(parser)
handler.options, args = parser.parse_args(args)

# Check the command specific arguments.
try:
    prepare = getattr(handler, 'prepare_' + command)
except AttributeError:
    pass
else:
    try:
        prepare(parser, *args)
    except TypeError:
        parser.error('invalid number of arguments for this command')

start()
