#!/usr/bin/env python
# Copyright (C) 2010 Samuel Abels.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
import os, sys, time
from optparse  import OptionParser
from Exscript  import __version__
from Exscriptd import RestClient, Order

__version__ = '0'

parser = OptionParser(usage   = '%prog [options] ip[:port] [filename]',
                      version = __version__)
parser.add_option('--user', '-u',
                  dest    = 'user',
                  metavar = 'STRING',
                  help    = '''
The username on the server.
'''.strip())
parser.add_option('--password', '-p',
                  dest    = 'password',
                  metavar = 'STRING',
                  help    = '''
The password on the server.
'''.strip())
parser.add_option('--wait', '-w',
                  dest    = 'wait',
                  action  = 'store_true',
                  default = False,
                  help    = '''
After placing the order, wait until it is completed.
'''.strip())
parser.add_option('--csv',
                  dest    = 'csv',
                  action  = 'store_true',
                  default = False,
                  help    = '''
The order is using CSV format.
'''.strip())
parser.add_option('--service',
                  dest    = 'service',
                  metavar = 'STRING',
                  help    = '''
Send to the service with the given name, instead of
the service that is specified in the order.
'''.strip())
parser.add_option('--status', '-s',
                  dest    = 'status',
                  metavar = 'STRING',
                  help    = '''
Prints the status of the order with the given id and exit.
'''.strip())
parser.add_option('--test',
                  dest    = 'test',
                  action  = 'store_true',
                  default = False,
                  help    = '''
Print the XML formatted order to stdout.
'''.strip())
parser.add_option('--order-count',
                  dest    = 'order_count',
                  action  = 'store_true',
                  default = False,
                  help    = '''
Prints the total number of orders.
'''.strip())
parser.add_option('--order-list',
                  dest    = 'order_list',
                  action  = 'store_true',
                  default = False,
                  help    = '''
Lists the last 50 orders.
'''.strip())
parser.add_option('--quite', '-q',
                  dest    = 'quite',
                  action  = 'store_true',
                  default = False,
                  help    = '''
Do not write anything to stdout.
'''.strip())

# Parse options.
options, args = parser.parse_args(sys.argv)
args.pop(0)

if not options.test:
    if not options.user:
        parser.error('Required option --user not set')
    if not options.password:
        parser.error('Required option --password not set')

try:
    address = args.pop(0)
except IndexError:
    parser.error('ip argument missing')

if options.status:
    pass
elif options.order_count:
    pass
elif options.order_list:
    pass
else:
    try:
        filename = args.pop(0)
    except IndexError:
        parser.error('order argument missing')

if args:
    parser.error('too many arguments')

def say(*args):
    if not options.quite:
        sys.stdout.write(' '.join(str(a) for a in args) + '\n')

def print_table(rows):
    if not rows:
        return
    widths = [1 for h in rows[0]]
    for row in rows:
        for n, col in enumerate(row):
            widths[n] = max(widths[n], len(col) + 2)
    for i, row in enumerate(rows):
        for n, col in enumerate(row):
            sys.stdout.write(col.ljust(widths[n]))
        print
        if i == 0:
            print '-' * sum(widths)

client = RestClient(address, options.user, options.password)

if options.status:
    print client.get_order_status_from_id(options.status)
    sys.exit(0)
elif options.order_count:
    print client.count_orders()
    sys.exit(0)
elif options.order_list:
    rows = [('OrderID', 'Service', 'Status', 'Time')]
    for order in client.get_order_list(0, 100, False):
        row = (order.get_id(),
               order.get_service_name(),
               order.get_status(),
               str(order.get_created_timestamp()))
        rows.append(row)
    print_table(rows)
    sys.exit(0)

if options.csv:
    if not options.service:
        parser.error('Need --service when using --csv.')
    order = Order.from_csv_file(options.service, filename)
else:
    order = Order.from_xml_file(filename)
    if options.service:
        order.set_service_name(service)

if options.test:
    print order.toxml()
    sys.exit(0)

client.place_order(order)
say('Placed order', order.id)

if options.wait:
    while True:
        status = client.get_order_status_from_id(order.id)
        say('Status:', status)
        if status in ('completed', 'rejected'):
            print 'Order', status + '.'
            break
        time.sleep(1)
