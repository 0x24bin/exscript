#!/usr/bin/env python
# Copyright (C) 2010 Samuel Abels.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
import sys
import os
import logging
from optparse            import OptionParser
from Exscript            import __version__
from Exscriptd           import pidutil
from Exscriptd.Config    import Config, default_config_dir
from Exscriptd.daemonize import daemonize

parser = OptionParser(usage = '%prog [options] [start|stop|restart]',
                      version = __version__)
parser.add_option('--domain',
                  dest    = 'domain',
                  metavar = 'DOMAIN',
                  default = None,
                  help    = 'The default domain name')
parser.add_option('--config-dir',
                  dest    = 'config_dir',
                  default = default_config_dir,
                  metavar = 'FILE',
                  help    = '''
The XML config file for the Exscript daemon.
'''.strip())
parser.add_option('--logfile',
                  dest    = 'logfile',
                  default = os.devnull,
                  metavar = 'FILE',
                  help    = '''
Daemon log location.
'''.strip())
parser.add_option('--pidfile',
                  dest    = 'pidfile',
                  metavar = 'FILE',
                  help    = '''
The file used for tracking the process id of the daemon.
'''.strip())
parser.add_option('--verbose',
                  dest    = 'verbose',
                  action  = 'store_true',
                  default = False,
                  help    = 'Show the conversation with the router')

# Parse options.
options, args = parser.parse_args(sys.argv)
args.pop(0)

try:
    action = args.pop(0)
except IndexError:
    parser.error('action argument not specified')

if not options.config_dir:
    parser.error('required option --config-dir not set')
options.logfile = os.path.abspath(options.logfile)

# Make sure that the daemon is not already running.
if not options.pidfile:
    options.pidfile = os.path.join(options.config_dir, 'exscript.pid')

if action == 'stop':
    if not pidutil.isalive(options.pidfile):
        parser.error('no running daemon found')
    pidutil.kill(options.pidfile)
    print "exscriptd stopped."
    sys.exit(0)
if action == 'start' and pidutil.isalive(options.pidfile):
    parser.error('daemon is already running')
if action == 'restart':
    pidutil.kill(options.pidfile)
    print "exscriptd stopped."

daemonize()

class LoggingIO(object):
    def __init__(self, channel = logging.INFO):
        self.channel = channel

    def write(self, data):
        data = data.rstrip()
        if data:
            logging.log(self.channel, data)

sys.stdout = LoggingIO()
sys.stderr = LoggingIO(logging.ERROR)

# Ending up here, we are in a new, decoupled daemon process.
# Set up logfile rotation.
logger = logging.getLogger('')
logger.setLevel(logging.INFO)
handler = logging.handlers.RotatingFileHandler(options.logfile,
                                               maxBytes    = 200000,
                                               backupCount = 5)
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
handler.setFormatter(formatter)
logger.addHandler(handler)
logging.info('exscriptd daemonized')

# Read the config.
config  = Config(options.config_dir)
daemons = config.get_daemons()

logging.info('config read')

if not daemons:
    dir = os.path.join(options.config_dir, 'services')
    msg = 'error: %s contains no enabled services\n' % dir
    sys.stderr.write(msg)
    sys.exit(1)

logging.info('config is ok, starting daemons')

pidutil.write(options.pidfile)
for daemon in daemons:
    daemon.run()
pidutil.remove(options.pidfile)
